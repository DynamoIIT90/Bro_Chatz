
---------- PUBLIC\SCRIPT.JS
const socket = io();
const welcomeScreen = document.getElementById('welcomeScreen');
const chatScreen = document.getElementById('chatScreen');
const usernameInput = document.getElementById('usernameInput');
const startChatBtn = document.getElementById('startChatBtn');
const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendBtn = document.getElementById('sendBtn');
const onlineCount = document.getElementById('onlineCount');
const typingIndicators = document.getElementById('typingIndicators');
const reactionPicker = document.getElementById('reactionPicker');
const replyPreview = document.getElementById('replyPreview');
const notificationContainer = document.getElementById('notificationContainer');
const aiModal = document.getElementById('aiModal');
const aiMessages = document.getElementById('aiMessages');
const aiCloseBtn = document.getElementById('aiCloseBtn');
const loadingScreen = document.getElementById('loadingScreen');
let openDMWindows = new Map(); // userId -> window element
let dmMessages = new Map(); // userId -> messages array
let dmTypingUsers = new Map(); // userId -> typing status
let onlineUsers = new Map();
let phonkAudio = new Audio();
document.addEventListener('DOMContentLoaded', function() {
    createParticleField();
    initializeEventListeners();
    messageInput.addEventListener('input', function() {
        this.style.height = Math.min(this.scrollHeight, 120) + 'px';
    });
});
function createParticleField() {
    const particleField = document.querySelector('.particle-field');
    for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.style.width = Math.random() * 3 + 1 + 'px';
        particle.style.background = `hsl(${Math.random() * 360}, 70%, 60%)`;
        particle.style.left = Math.random() * 100 + '%';
        particle.style.top = Math.random() * 100 + '%';
        particle.style.opacity = Math.random() * 0.5 + 0.2;
        particle.style.animation = `floatParticle ${Math.random() * 20 + 10}s linear infinite`;
        particle.style.animationDelay = Math.random() * 20 + 's';
        particleField.appendChild(particle);
const style = document.createElement('style');
        0% { transform: translate(0, 0) rotate(0deg); }
        25% { transform: translate(${Math.random() * 100 - 50}px, ${Math.random() * 100 - 50}px) rotate(90deg); }
        50% { transform: translate(${Math.random() * 100 - 50}px, ${Math.random() * 100 - 50}px) rotate(180deg); }
        75% { transform: translate(${Math.random() * 100 - 50}px, ${Math.random() * 100 - 50}px) rotate(270deg); }
        100% { transform: translate(0, 0) rotate(360deg); }
document.head.appendChild(style);
function initializeEventListeners() {
    usernameInput.addEventListener('input', function() {
        const value = this.value.trim();
        if (value.length >= 2) {
            startChatBtn.classList.add('ready');
            startChatBtn.classList.remove('ready');
    });
    const developerUsername = document.getElementById('developerUsername');
    const developerPassword = document.getElementById('developerPassword');
    const eliteLoginBtn = document.getElementById('eliteLoginBtn');
    function checkEliteCredentials() {
        const username = developerUsername.value.trim();
        const password = developerPassword.value.trim();
        eliteLoginBtn.disabled = !(username && password);
    developerUsername.addEventListener('input', checkEliteCredentials);
    developerPassword.addEventListener('input', checkEliteCredentials);
    eliteLoginBtn.addEventListener('click', function() {
    const username = developerUsername.value.trim();
    const password = developerPassword.value.trim();
    if (username.toLowerCase() === 'developer' && password === 'vivekisgod8085') {
        startChat();
        if (!sessionStorage.getItem('phonkPlayed')) {
            phonkAudio.play().catch(err => console.log('Audio play blocked:', err));
            phonkAudio.onended = () => {
            sessionStorage.setItem('phonkPlayed', 'true'); // mark as played
        alert('Invalid developer credentials!');
});
eliteLoginBtn.scrollIntoView({ behavior: 'smooth', block: 'center' });
  developerPassword.addEventListener('keypress', function(e) {
    if (e.key === 'Enter' && !eliteLoginBtn.disabled) {
        eliteLoginBtn.click();
});
    const hamburgerBtn = document.getElementById('hamburgerBtn');
    const developerPanel = document.getElementById('developerPanel');
    const panelCloseBtn = document.getElementById('panelCloseBtn');
    const warnModal = document.getElementById('warnModal');
    const warnCloseBtn = document.getElementById('warnCloseBtn');
    const sendWarnBtn = document.getElementById('sendWarnBtn');
    const cancelWarnBtn = document.getElementById('cancelWarnBtn');
    hamburgerBtn.addEventListener('click', function() {
        this.classList.toggle('active');
        developerPanel.classList.toggle('open');
        requestOnlineUsers();
    });
    panelCloseBtn.addEventListener('click', function() {
        hamburgerBtn.classList.remove('active');
        developerPanel.classList.remove('open');
    });
    warnCloseBtn.addEventListener('click', closeWarnModal);
    cancelWarnBtn.addEventListener('click', closeWarnModal);
    sendWarnBtn.addEventListener('click', function() {
        const reason = document.getElementById('warnReason').value.trim();
        const userName = document.getElementById('warnUserName').textContent;
        if (reason) {
            socket.emit('warn-user', { username: userName, reason: reason });
            closeWarnModal();
            alert('Please enter a warning reason!');
    });
    usernameInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !startChatBtn.disabled) {
            startChat();
    });
    startChatBtn.addEventListener('click', startChat);
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage();
    });
    messageInput.addEventListener('input', function() {
        if (!isTyping && this.value.trim()) {
            socket.emit('typing-start');
        clearTimeout(typingTimer);
        typingTimer = setTimeout(() => {
            if (isTyping) {
                socket.emit('typing-stop');
        }, 4000);
    });
    sendBtn.addEventListener('click', sendMessage);
    aiCloseBtn.addEventListener('click', closeAIModal);
    document.addEventListener('click', function(e) {
        if (!reactionPicker.contains(e.target) && !e.target.closest('.message-bubble')) {
            hideReactionPicker();
        if (e.target === aiModal) {
            closeAIModal();
    });
    chatMessages.addEventListener('touchstart', function(e) {
        const messageBubble = e.target.closest('.message-bubble');
        if (messageBubble) {
            longPressTimer = setTimeout(() => {
                showReactionPicker(e, messageBubble);
            }, 500);
    });
    chatMessages.addEventListener('touchend', function() {
        clearTimeout(longPressTimer);
    });
    chatMessages.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        const messageBubble = e.target.closest('.message-bubble');
        if (messageBubble) {
            showReactionPicker(e, messageBubble);
    });
document.querySelectorAll('.reaction-emoji').forEach(emoji => {
    emoji.addEventListener('click', function() {
        if (selectedMessage) {
            addReactionAnimation(this);
            if (reactionPicker.dataset.dmUserId) {
                });
                });
            hideReactionPicker();
    });
});
document.getElementById('replyBtn').addEventListener('click', function() {
    if (selectedMessage) {
        if (reactionPicker.dataset.dmUserId) {
            console.log('DM reply functionality');
            startReply(selectedMessage);
        hideReactionPicker();
});
function startChat() {
    if (isDeveloper) {
        username = usernameInput.value.trim();
        if (username.length < 2) return;
initializeDMSystem();
if (currentUser === "DEVELOPER" && !sessionStorage.getItem('phonkPlayed')) {
    const phonkAudio = new Audio('phonk.mp3'); // file path relative to public folder
    phonkAudio.play().catch(() => {
        console.log('Autoplay blocked, will play after user interaction');
    });
    phonkAudio.addEventListener('ended', () => {
        console.log('Phonk finished playing');
    });
    sessionStorage.setItem('phonkPlayed', 'true');
    showLoadingScreen();
    startChatBtn.classList.add('clicked');
    setTimeout(() => {
        socket.emit('user-joined', { username: username, isDeveloper: isDeveloper });
if (isDeveloper) {
    document.getElementById('developerControls').style.display = 'block';
        setTimeout(() => {
            welcomeScreen.classList.remove('active');
            chatScreen.classList.add('active');
            hideLoadingScreen();
            messageInput.focus();
        }, 1000);
    }, 500);
function sendMessage() {
    const message = messageInput.value.trim();
    if (!message) return;
    if (message.startsWith('/ai ')) {
        openAIModal();
        const aiPrompt = message.substring(4);
        addAIMessage(aiPrompt, 'user');
        showAITyping();
    socket.emit('chat-message', messageData);
    sendBtn.classList.add('sending');
    setTimeout(() => {
        sendBtn.classList.remove('sending');
    }, 600);
    clearReply();
    if (isTyping) {
        socket.emit('typing-stop');
socket.on('user-color-assigned', function(data) {
});
socket.on('admin-message', function(data) {
    addAdminMessage(data.message);
});
socket.on('chat-message', function(data) {
    addMessage(data);
    playMessageSound();
});
socket.on('user-notification', function(data) {
    showUserNotification(data);
});
socket.on('update-online-count', function(count) {
    updateOnlineCount(count);
});
socket.on('user-typing', function(data) {
    if (data.isTyping) {
        showTypingIndicator(data);
        hideTypingIndicator(data.username);
});
socket.on('message-reaction', function(data) {
    addMessageReaction(data);
    if (data.username !== currentUser) {
        showReactionNotification(data);
});
socket.on('ai-response', function(data) {
    hideAITyping();
    addAIMessage(data.response, 'bot');
});
socket.on('ai-typing', function(isTyping) {
    if (isTyping) {
        showAITyping();
        hideAITyping();
});
socket.on('online-users-list', function(users) {
    displayOnlineUsers(users);
});
socket.on('user-kicked', function(data) {
    if (data.username === currentUser && !isDeveloper) {
        alert('You have been kicked out by the developer!');
        location.reload();
});
socket.on('user-warned', function(data) {
    if (data.username === currentUser) {
        alert(`⚠️ WARNING: You are being warned for: ${data.reason}`);
});
socket.on('kick-notification', function(data) {
    addAdminMessage(`🚫 ${data.username} was kicked out by DEVELOPER`);
});
socket.on('users-for-dm', function(users) {
    displayUsersForDM(users);
});
socket.on('dm-message', function(data) {
    });
    if (openDMWindows.has(data.senderId)) {
        });
    playMessageSound();
});
socket.on('dm-typing-start', function(data) {
    showDMTypingIndicator(data.senderId, data.username, data.color);
});
socket.on('dm-typing-stop', function(data) {
    hideDMTypingIndicator(data.senderId);
});
socket.on('dm-message-status', function(data) {
    // Update message status (read/delivered)
    const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
    if (messageElement) {
        const statusElement = messageElement.querySelector('.dm-message-status');
        if (statusElement) {
});
socket.on('dm-reaction', function(data) {
    const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
    if (messageElement) {
        // Add reaction display logic here (similar to global chat)
        console.log('DM reaction received:', data);
});
// Developer login sound (Phonk broadcast)
socket.on("playPhonk", function(data) {
        const audio = new Audio(data.track);
        audio.play().catch(err => {
            console.log("Autoplay blocked, waiting for user interaction:", err);
        });
    } catch (err) {
        console.error("Error playing Phonk track:", err);
});
function addMessage(data) {
    const messageDiv = document.createElement('div');
    if (data.replyTo) {
                <strong>${data.replyTo.username}:</strong> ${data.replyTo.message.substring(0, 50)}${data.replyTo.message.length > 50 ? '...' : ''}
                <span class="timestamp">${formatTime(data.timestamp)}</span>
            <div class="message-content">${escapeHtml(data.message)}</div>
    chatMessages.appendChild(messageDiv);
    scrollToBottom();
    setTimeout(() => {
        messageDiv.style.transform = 'translateY(0)';
    }, 50);
function addAdminMessage(message) {
    const messageDiv = document.createElement('div');
    chatMessages.appendChild(messageDiv);
    scrollToBottom();
function addAIMessage(message, type) {
    const messageDiv = document.createElement('div');
        <div class="message-content">${escapeHtml(message)}</div>
    aiMessages.appendChild(messageDiv);
function showTypingIndicator(data) {
    hideTypingIndicator(data.username);
    const typingDiv = document.createElement('div');
    typingIndicators.appendChild(typingDiv);
    scrollToBottom();
function hideTypingIndicator(username) {
    const existingIndicator = typingIndicators.querySelector(`[data-username="${username}"]`);
    if (existingIndicator) {
        setTimeout(() => {
            existingIndicator.remove();
        }, 300);
function openAIModal() {
    addAIMessage("Hello! I'm your AI assistant. How can I help you today?", 'bot');
function closeAIModal() {
function showAITyping() {
    const typingDiv = document.createElement('div');
    aiMessages.appendChild(typingDiv);
function hideAITyping() {
    const typingMessage = aiMessages.querySelector('.ai-typing');
    if (typingMessage) {
        typingMessage.remove();
function showReactionPicker(event, messageBubble) {
    selectedMessage = messageBubble.closest('.message');
    const rect = messageBubble.getBoundingClientRect();
    reactionPicker.style.left = Math.min(rect.left, window.innerWidth - 200) + 'px';
    reactionPicker.style.top = (rect.top - reactionPicker.offsetHeight - 10) + 'px';
function hideReactionPicker() {
function addReactionAnimation(emojiElement) {
    const floatingEmoji = document.createElement('div');
    floatingEmoji.style.left = emojiElement.getBoundingClientRect().left + 'px';
    floatingEmoji.style.top = emojiElement.getBoundingClientRect().top + 'px';
    document.body.appendChild(floatingEmoji);
    setTimeout(() => {
        floatingEmoji.remove();
    }, 1000);
const reactionStyle = document.createElement('style');
        0% { transform: scale(1) translateY(0); opacity: 1; }
        50% { transform: scale(1.5) translateY(-30px); opacity: 0.8; }
        100% { transform: scale(0.5) translateY(-60px); opacity: 0; }
        0% { opacity: 1; transform: translateX(0); }
        100% { opacity: 0; transform: translateX(-20px); }
document.head.appendChild(reactionStyle);
function addMessageReaction(data) {
    const message = document.querySelector(`[data-message-id="${data.messageId}"]`);
    if (message) {
        const reactionsContainer = message.querySelector('.message-reactions');
        let existingReaction = reactionsContainer.querySelector(`[data-emoji="${data.emoji}"]`);
        if (existingReaction) {
            const count = existingReaction.querySelector('.reaction-count');
            count.textContent = parseInt(count.textContent) + 1;
            const reactionElement = document.createElement('span');
            reactionsContainer.appendChild(reactionElement);
function startReply(messageElement) {
    const username = messageElement.querySelector('.username').textContent;
    const messageContent = messageElement.querySelector('.message-content').textContent;
    const userColor = messageElement.querySelector('.username').style.color;
                <div style="color: rgba(255,255,255,0.7); font-size: 0.9rem; margin-top: 2px;">
                    ${messageContent.substring(0, 50)}${messageContent.length > 50 ? '...' : ''}
            <button onclick="clearReply()" style="background: none; border: none; color: rgba(255,255,255,0.5); cursor: pointer; font-size: 1.2rem;">×</button>
    messageInput.focus();
function clearReply() {
function showUserNotification(data) {
    const notification = document.createElement('div');
    notificationContainer.appendChild(notification);
    setTimeout(() => {
        notification.classList.add('notification-burst');
        setTimeout(() => {
            notification.remove();
        }, 500);
    }, 3000);
function showReactionNotification(data) {
    const notification = document.createElement('div');
    notificationContainer.appendChild(notification);
    setTimeout(() => {
        notification.classList.add('notification-burst');
        setTimeout(() => {
            notification.remove();
        }, 500);
    }, 2000);
function updateOnlineCount(count) {
    setTimeout(() => {
    }, 10);
const countStyle = document.createElement('style');
        0% { transform: scale(1); }
        50% { transform: scale(1.2); }
        100% { transform: scale(1); }
        0% { transform: scale(1); }
        50% { transform: scale(1.3); }
        100% { transform: scale(1); }
        0% { opacity: 0; transform: scale(0.5); }
        100% { opacity: 1; transform: scale(1); }
        background: rgba(255, 255, 255, 0.1);
        background: rgba(255, 255, 255, 0.2);
        transform: scale(1.1);
document.head.appendChild(countStyle);
function scrollToBottom() {
function formatTime(timestamp) {
    const date = new Date(timestamp);
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
function escapeHtml(text) {
    const div = document.createElement('div');
function playMessageSound() {
    const audioContext = new (window.AudioContext || window.webkitAudioContext)();
    const oscillator = audioContext.createOscillator();
    const gainNode = audioContext.createGain();
    oscillator.connect(gainNode);
    gainNode.connect(audioContext.destination);
    oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
    oscillator.frequency.setValueAtTime(600, audioContext.currentTime + 0.1);
    gainNode.gain.setValueAtTime(0, audioContext.currentTime);
    gainNode.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.01);
    gainNode.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.2);
    oscillator.start(audioContext.currentTime);
    oscillator.stop(audioContext.currentTime + 0.2);
function showLoadingScreen() {
function hideLoadingScreen() {
chatMessages.addEventListener('scroll', function() {
    if (Math.random() > 0.95) { // 5% chance on scroll
        createScrollParticle();
});
function createScrollParticle() {
    const particle = document.createElement('div');
    particle.style.background = `hsl(${Math.random() * 360}, 70%, 60%)`;
    particle.style.top = Math.random() * chatMessages.offsetHeight + 'px';
    chatMessages.appendChild(particle);
    setTimeout(() => {
        particle.remove();
    }, 2000);
const particleStyle = document.createElement('style');
        0% { opacity: 1; transform: translateX(0); }
        100% { opacity: 0; transform: translateX(-50px); }
document.head.appendChild(particleStyle);
document.addEventListener('mousemove', function(e) {
    if (Math.random() > 0.99) { // Very rare cursor trail
        createCursorTrail(e.clientX, e.clientY);
});
function createCursorTrail(x, y) {
    const trail = document.createElement('div');
    trail.style.background = `hsl(${Math.random() * 360}, 70%, 60%)`;
    document.body.appendChild(trail);
    setTimeout(() => {
        trail.remove();
    }, 1000);
const trailStyle = document.createElement('style');
        0% { opacity: 0.8; transform: scale(1); }
        100% { opacity: 0; transform: scale(0); }
document.head.appendChild(trailStyle);
function requestOnlineUsers() {
    if (isDeveloper) {
        socket.emit('get-online-users');
function displayOnlineUsers(users) {
    const usersList = document.getElementById('onlineUsersList');
        if (user.username !== 'DEVELOPER') { // Don't show developer in the list
            const userDiv = document.createElement('div');
                    <button class="user-action-btn kick-btn" onclick="kickUser('${user.username}')">Kick</button>
                    <button class="user-action-btn warn-btn" onclick="openWarnModal('${user.username}')">Warn</button>
            usersList.appendChild(userDiv);
    });
function kickUser(username) {
    if (confirm(`Are you sure you want to kick ${username}?`)) {
        socket.emit('kick-user', { username: username });
function openWarnModal(username) {
    document.getElementById('warnUserName').textContent = username;
    document.getElementById('warnReason').value = '';
function closeWarnModal() {
function initializeDMSystem() {
    const userHamburgerBtn = document.getElementById('userHamburgerBtn');
    const userHamburgerMenu = document.getElementById('userHamburgerMenu');
    const userHamburgerClose = document.getElementById('userHamburgerClose');
    document.getElementById('regularUserControls').style.display = 'block';
    userHamburgerBtn.addEventListener('click', function() {
        this.classList.toggle('active');
        userHamburgerMenu.classList.toggle('open');
        requestUsersList();
    });
    userHamburgerClose.addEventListener('click', function() {
        userHamburgerBtn.classList.remove('active');
        userHamburgerMenu.classList.remove('open');
    });
    document.addEventListener('click', function(e) {
        if (!userHamburgerMenu.contains(e.target) && !userHamburgerBtn.contains(e.target)) {
            userHamburgerBtn.classList.remove('active');
            userHamburgerMenu.classList.remove('open');
    });
function requestUsersList() {
    socket.emit('get-users-for-dm');
function displayUsersForDM(users) {
    const container = document.getElementById('usersListContainer');
        if (user.username !== currentUser) {
            const userDiv = document.createElement('div');
            userDiv.onclick = () => openDMWindow(user);
            const firstLetter = user.username.charAt(0).toUpperCase();
            container.appendChild(userDiv);
    });
function openDMWindow(user) {
    document.getElementById('userHamburgerBtn').classList.remove('active');
    document.getElementById('userHamburgerMenu').classList.remove('open');
    if (openDMWindows.has(user.id)) {
        const existingWindow = openDMWindows.get(user.id);
    const dmWindow = document.createElement('div');
    dmWindow.style.top = (100 + offset) + 'px';
    dmWindow.style.left = (50 + offset) + 'px';
    const firstLetter = user.username.charAt(0).toUpperCase();
                <button class="dm-home-btn" onclick="minimizeDMWindow('${user.id}')">
                <button class="dm-close-btn" onclick="closeDMWindow('${user.id}')">
                <button class="dm-emoji-btn" onclick="toggleDMEmojis('${user.id}')">
                <input type="file" class="gif-input" id="gifInput-${user.id}" accept=".gif,image/*" onchange="handleGIFUpload('${user.id}', this)">
                <button class="dm-send-btn" onclick="sendDMMessage('${user.id}')">
    document.getElementById('dmWindowsContainer').appendChild(dmWindow);
    openDMWindows.set(user.id, dmWindow);
    setupDMInputEvents(user.id);
    loadDMMessages(user.id);
function setupDMInputEvents(userId) {
    const input = document.getElementById(`dmInput-${userId}`);
    input.addEventListener('input', function() {
        this.style.height = Math.min(this.scrollHeight, 80) + 'px';
        if (!isDMTyping && this.value.trim()) {
            socket.emit('dm-typing-start', { targetUserId: userId });
        clearTimeout(dmTypingTimer);
        dmTypingTimer = setTimeout(() => {
            if (isDMTyping) {
                socket.emit('dm-typing-stop', { targetUserId: userId });
        }, 3000);
    });
    input.addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendDMMessage(userId);
    });
    makeDMWindowDraggable(userId);
function makeDMWindowDraggable(userId) {
    const dmWindow = openDMWindows.get(userId);
    const header = dmWindow.querySelector('.dm-header');
    header.addEventListener('mousedown', function(e) {
        if (e.target.closest('button')) return;
    });
    document.addEventListener('mousemove', function(e) {
        if (!isDragging) return;
        dmWindow.style.left = Math.max(0, Math.min(currentX, window.innerWidth - dmWindow.offsetWidth)) + 'px';
        dmWindow.style.top = Math.max(0, Math.min(currentY, window.innerHeight - dmWindow.offsetHeight)) + 'px';
    });
    document.addEventListener('mouseup', function() {
    });
function sendDMMessage(userId) {
    const input = document.getElementById(`dmInput-${userId}`);
    const message = input.value.trim();
    if (!message) return;
        timestamp: new Date(),
        messageId: Date.now() + Math.random()
    socket.emit('dm-message', messageData);
    });
function addDMMessageToWindow(userId, messageData) {
    const messagesContainer = document.getElementById(`dmMessages-${userId}`);
    if (!messagesContainer) return;
    const messageDiv = document.createElement('div');
    const timeStr = new Date(messageData.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    if (messageData.isOwn) {
    let contentHtml = escapeHtml(messageData.message);
    if (messageData.isGIF) {
            ${messageData.isOwn ? `<button class="dm-delete-btn" onclick="deleteDMMessage('${userId}', '${messageData.messageId}')"><i class="fas fa-trash"></i></button>` : ''}
    messageDiv.addEventListener('contextmenu', function(e) {
        e.preventDefault();
        showDMReactionPicker(e, messageDiv, userId);
    });
    messagesContainer.appendChild(messageDiv);
    scrollDMToBottom(userId);
    if (!dmMessages.has(userId)) {
        dmMessages.set(userId, []);
    dmMessages.get(userId).push(messageData);
function scrollDMToBottom(userId) {
    const messagesContainer = document.getElementById(`dmMessages-${userId}`);
    if (messagesContainer) {
function loadDMMessages(userId) {
    const messages = dmMessages.get(userId) || [];
    messages.forEach(msg => addDMMessageToWindow(userId, msg));
function closeDMWindow(userId) {
    const dmWindow = openDMWindows.get(userId);
    if (dmWindow) {
        setTimeout(() => {
            dmWindow.remove();
            openDMWindows.delete(userId);
        }, 300);
function minimizeDMWindow(userId) {
    // Return to global chat (hide DM window but keep it in memory)
    closeDMWindow(userId);
function deleteDMMessage(userId, messageId) {
    if (confirm('Delete this message?')) {
        socket.emit('delete-dm-message', { targetUserId: userId, messageId: messageId });
        const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
        if (messageElement) {
            setTimeout(() => messageElement.remove(), 300);
        const messages = dmMessages.get(userId);
        if (messages) {
            const index = messages.findIndex(msg => msg.messageId === messageId);
            if (index > -1) {
                messages.splice(index, 1);
function showDMReactionPicker(event, messageElement, userId) {
    const rect = messageElement.getBoundingClientRect();
    reactionPicker.style.left = Math.min(rect.left, window.innerWidth - 200) + 'px';
    reactionPicker.style.top = (rect.top - reactionPicker.offsetHeight - 10) + 'px';
function handleGIFUpload(userId, input) {
    if (!file) return;
    if (!file.type.startsWith('image/')) {
        alert('Please select an image file!');
    // Check file size (max 5MB)
    if (file.size > 5 * 1024 * 1024) {
        alert('File size must be less than 5MB!');
    const reader = new FileReader();
    reader.onload = function(e) {
            timestamp: new Date(),
            messageId: Date.now() + Math.random(),
        socket.emit('dm-message', messageData);
        });
    reader.readAsDataURL(file);
function showDMTypingIndicator(userId, username, color) {
    const typingContainer = document.getElementById(`dmTyping-${userId}`);
    if (!typingContainer) return;
function hideDMTypingIndicator(userId) {
    const typingContainer = document.getElementById(`dmTyping-${userId}`);
    if (typingContainer) {
const dmStyle = document.createElement('style');
        0% { opacity: 1; transform: scale(1) translateY(0); }
        100% { opacity: 0; transform: scale(0.8) translateY(50px); }
        0% { opacity: 1; transform: translateX(0); }
        100% { opacity: 0; transform: translateX(-50px); }
document.head.appendChild(dmStyle);
function isRestrictedUsername(username) {
    return restricted.includes(username);
